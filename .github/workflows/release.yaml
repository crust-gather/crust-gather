on:
  # Indicates I want to run this workflow on all branches, PR, and tags
  push:
    branches: ["main"]
    tags: ["*"]
  pull_request:
    branches: ["main"]

env:
  # Define the rust version to use
  RUST_VERSION: 1.85.1
  # Rust build arguments
  BUILD_ARGS: "--release --features=archive"
  # The binary name
  BIN_NAME: "kubectl-crust-gather"

permissions:
  contents: write

jobs:

  test:
    name: Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v5

      # Linux & Windows
      - name: Install rust toolchain
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: actions-rs/toolchain@v1
        with:
          # We setup Rust toolchain and the desired target
          profile: minimal
          toolchain: "${{ env.RUST_VERSION }}"
          override: true
          target: x86_64-unknown-linux-gnu
          components: rustfmt, clippy
      - uses: actions/setup-go@v5.5.0
        with:
          go-version: '1.24'
          check-latest: true
          cache: true

      - name: Test binary
        run: make test

  build:
    name: Build - ${{ matrix.platform.name }}
    needs: test
    # By default, runs on Ubuntu, otherwise, override with the desired os
    runs-on: ${{ matrix.platform.os || 'ubuntu-22.04' }}
    strategy:
      matrix:
        # Set platforms you want to build your binaries on
        platform:
          # Linux
          # The name is used for pretty print
          - name: Linux x86_64
            # The used Rust target architecture
            target: x86_64-unknown-linux-musl

          - name: Linux aarch64
            target: aarch64-unknown-linux-gnu

          # Mac OS
          - name: MacOS x86_64
            target: x86_64-apple-darwin

          # Windows
          - name: Windows x86_64
            # Use another GitHub action OS
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v5

      # Linux & Windows
      - name: Install rust toolchain
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: actions-rs/toolchain@v1
        with:
          # We setup Rust toolchain and the desired target
          profile: minimal
          toolchain: "${{ env.RUST_VERSION }}"
          override: true
          target: ${{ matrix.platform.target }}
          components: rustfmt, clippy

      - name: Build ${{ matrix.platform.name }} binary
        if: ${{ !contains(matrix.platform.target, 'apple') }}
        uses: actions-rs/cargo@v1
        # We use cross-rs if not running on x86_64 architecture on Linux
        with:
          command: build
          use-cross: true
          args: ${{ env.BUILD_ARGS }} --target ${{ matrix.platform.target }}

      # Mac OS
      - name: Build ${{ matrix.platform.name }} binary
        if: contains(matrix.platform.target, 'apple')
        # We use a dedicated Rust image containing required Apple libraries to cross-compile on multiple archs
        run: |
          docker run --rm --volume "${PWD}":/root/src --workdir /root/src joseluisq/rust-linux-darwin-builder:$RUST_VERSION \
          sh -c "CC=o64-clang CXX=o64-clang++ cargo build $BUILD_ARGS --target ${{ matrix.platform.target }}"

      - name: Store artifact
        uses: actions/upload-artifact@v4
        id: store-build
        with:
          # Finally, we store the binary as GitHub artifact for later usage
          name: ${{ matrix.platform.target }}-${{ env.BIN_NAME }}
          path: target/${{ matrix.platform.target }}/release/${{ env.BIN_NAME }}${{ contains(matrix.platform.target, 'windows') && '.exe' || '' }}
          retention-days: 1

      - name: Output artifact URL
        run:  echo 'Artifact URL is ${{ steps.store-build.outputs.artifact-url }}'

  release:
    name: Release
    needs: [build]
    # We run the release job only if a tag starts with 'v' letter
    if: startsWith( github.ref, 'refs/tags/v' )
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v5

      - name: Validate tag consistency with crate version
        run: |
          ref=${{ github.ref }}
          tag=${ref#refs/tags/}
          version=${tag#v}

          echo "tag: $tag"
          echo "version: $version"

          crate_version_toml=$(grep -E '^version =' Cargo.toml | grep --color=never -oE '[0-9]+\.[0-9]+\.[0-9]+')

          echo "version in Cargo.toml: $crate_version_toml"

          if [ $version != $crate_version_toml ]; then
            echo "Mismatch between crate version ($crate_version_toml) and tag ($tag)."
            echo "Run \`make update-crate version=$version\`, push changes and try again."
            exit 1
          fi

      # Goreleaser
      - name: Set up Go
        uses: actions/setup-go@v5

      # Download all artifacts
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          # Run goreleaser and ignore non-committed files (downloaded artifacts)
          args: release --skip=validate --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update new version in krew-index
        uses: rajatjindal/krew-release-bot@v0.0.47
